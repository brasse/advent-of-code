(use-modules (ice-9 rdelim))

(define (input)
  (list->vector (map string->number (string-split (read-line) #\,))))

(define (digit i n)
  (modulo (quotient i (expt 10 n)) 10))

(define (opcode i)
  (modulo i 100))

(define (run program)
  (let* ((p 0)
         (imm (lambda (pos)
                (vector-ref program pos)))
         (ind (lambda (pos)
                (vector-ref program (vector-ref program pos))))
         (w (lambda (pos value)
              (vector-set! program pos value)))
         (mode (lambda (i n)
                 (case (digit i n)
                   ((0) ind)
                   ((1) imm)))))
    (while #t
      (let ((i (vector-ref program p)))
        (case (opcode i)
          ((1)
           (w (imm (+ p 3))
              (+ ((mode i 2) (+ p 1))
                 ((mode i 3) (+ p 2))))
           (set! p (+ p 4)))
          ((2)
           (w (imm (+ p 3))
              (* ((mode i 2) (+ p 1))
                 ((mode i 3) (+ p 2))))
           (set! p (+ p 4)))
          ((3)
           (w (imm (+ p 1)) 1)
           (set! p (+ p 2)))
          ((4)
           (format #t "~a~%" ((mode i 2) (+ p 1)))
           (set! p (+ p 2)))
          ((99) (break)))
        ))))

(define p (input))
(run p)
