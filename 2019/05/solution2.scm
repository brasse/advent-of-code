(use-modules (ice-9 rdelim))

(define (input)
  (list->vector (map string->number (string-split (read-line) #\,))))

(define (digit i n)
  (modulo (quotient i (expt 10 n)) 10))

(define (opcode i)
  (modulo i 100))

(define (run program)
  (let* ((p 0)
         (imm (lambda (offset)
                (vector-ref program (+ p offset))))
         (ind (lambda (offset)
                (vector-ref program (vector-ref program (+ p offset)))))
         (w (lambda (pos value)
              (vector-set! program pos value)))
         (mode (lambda (i n)
                 (case (digit i n)
                   ((0) ind)
                   ((1) imm))))
         (r (lambda (i n)
              ((mode i (1+ n)) n))))
    (while #t
      (let ((i (imm 0)))
        (case (opcode i)
          ((1)
           (w (imm 3) (+ (r i 1) (r i 2)))
           (set! p (+ p 4)))
          ((2)
           (w (imm 3) (* (r i 1) (r i 2)))
           (set! p (+ p 4)))
          ((3)
           (w (imm 1) 5)
           (set! p (+ p 2)))
          ((4)
           (format #t "~a~%" (r i 1))
           (set! p (+ p 2)))
          ((5)
           (if (not (zero? (r i 1)))
               (set! p (r i 2))
               (set! p (+ p 3))))
          ((6)
           (if (zero? (r i 1))
               (set! p (r i 2))
               (set! p (+ p 3))))
          ((7)
           (if (< (r i 1) (r i 2))
               (w (imm 3) 1)
               (w (imm 3) 0))
           (set! p (+ p 4)))
          ((8)
           (if (= (r i 1) (r i 2))
               (w (imm 3) 1)
               (w (imm 3) 0))
           (set! p (+ p 4)))
          ((99) (break)))
        ))))

(run (input))
